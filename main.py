 # -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design_detector.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets

from funcions import get_wifi_params, compare_wifi_params
import subprocess

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(550, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(0, 0))
        MainWindow.setMaximumSize(QtCore.QSize(550, 600))
        MainWindow.setStyleSheet("background-color: rgb(40, 41, 35);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.start_detecting_btn = QtWidgets.QPushButton(self.centralwidget)
        self.start_detecting_btn.setGeometry(QtCore.QRect(210, 540, 130, 30))
        quit = QtWidgets.QAction("Quit", self)
        quit.triggered.connect(self.close)
        self.start_detecting_btn.setStyleSheet("QPushButton {\n"
"font: 10pt \"MS Shell Dlg 2\";\n"
"background-color: rgb(254, 164, 101);\n"
"border-radius: 10px;     \n"
"}           \n"
"QPushButton:pressed {background-color:  rgb(118, 118, 118);}")
        self.start_detecting_btn.setObjectName("start_detecting_btn")
        self.info_lab = QtWidgets.QLabel(self.centralwidget)
        self.info_lab.setGeometry(QtCore.QRect(10, 15, 550, 50))
        self.info_lab.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.info_lab.setObjectName("info_lab")
        self.bssid_lab = QtWidgets.QLabel(self.centralwidget)
        self.bssid_lab.setGeometry(QtCore.QRect(10, 65, 550, 50))
        self.bssid_lab.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.bssid_lab.setObjectName("bssid_lab")
        self.auth_lab = QtWidgets.QLabel(self.centralwidget)
        self.auth_lab.setGeometry(QtCore.QRect(10, 115, 550, 50))
        self.auth_lab.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.auth_lab.setObjectName("auth_lab")
        self.cipher_lab = QtWidgets.QLabel(self.centralwidget)
        self.cipher_lab.setGeometry(QtCore.QRect(10, 165, 550, 50))
        self.cipher_lab.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.cipher_lab.setObjectName("cipher_lab")
        self.band_lab = QtWidgets.QLabel(self.centralwidget)
        self.band_lab.setGeometry(QtCore.QRect(10, 215, 550, 50))
        self.band_lab.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.band_lab.setObjectName("band_lab")
        self.channel_lab = QtWidgets.QLabel(self.centralwidget)
        self.channel_lab.setGeometry(QtCore.QRect(10, 265, 550, 50))
        self.channel_lab.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.channel_lab.setObjectName("channel_lab")
        self.rec_rate_lab = QtWidgets.QLabel(self.centralwidget)
        self.rec_rate_lab.setGeometry(QtCore.QRect(10, 315, 550, 50))
        self.rec_rate_lab.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.rec_rate_lab.setObjectName("rec_rate_lab")
        self.signal_lab = QtWidgets.QLabel(self.centralwidget)
        self.signal_lab.setGeometry(QtCore.QRect(10, 415, 550, 50))
        self.signal_lab.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.signal_lab.setObjectName("signal_lab")
        self.trans_rate_lab = QtWidgets.QLabel(self.centralwidget)
        self.trans_rate_lab.setGeometry(QtCore.QRect(10, 365, 550, 50))
        self.trans_rate_lab.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.trans_rate_lab.setObjectName("trans_rate_lab")
        #MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Rogue AP detector"))
        self.start_detecting_btn.setText(_translate("MainWindow", "START detecting"))
        self.info_lab.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#cacaca;\">INFO about the connected network: </span><span style=\" color:#cacaca;\"></span></p><p><br/></p><p><br/></p></body></html>"))
        self.bssid_lab.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">BSSID:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>"))
        self.auth_lab.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Auth:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>"))
        self.cipher_lab.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Cipher:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>"))
        self.band_lab.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Band:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>"))
        self.channel_lab.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Channel:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>"))
        self.rec_rate_lab.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Receive rate:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>"))
        self.signal_lab.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Signal:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>"))
        self.trans_rate_lab.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Transmit rate:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>"))

    def add_functions(self):
        self.start_detecting_btn.clicked.connect(self.start_detecting)

    def closeEvent(self, event):
        print("sdfsdfsdfs")
        # Ask for confirmation before closing
        confirmation = QMessageBox.question(self, "Confirmation", "Are you sure you want to close the application?", QMessageBox.Yes | QMessageBox.No)

        if confirmation == QMessageBox.Yes:
            event.accept()  # Close the app
        else:
            event.ignore()  # Don't close the app

    def start_detecting(self):
        if self.start_detecting_btn.text() == "START detecting":
            with open("BOOL", "w") as f:
                f.write("True")
            self.start_detecting_btn.setText("STOP detecting")
            params = get_wifi_params()
            self.info_lab.setText(f"<html><head/><body><p><span style=\" font-weight:600; color:#d0d0d0;\">INFO about the connected network: </span><span style=\" color:#d0d0d0;\">{params['ssid']}</span></p><p><br/></p><p><br/></p></body></html>")
            self.bssid_lab.setText(f"<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">BSSID: </span><span style=\" font-size:9pt; color:#d0d0d0;\">{params['bssid']}</span></p><p><br/></p><p><br/></p></body></html>")
            self.signal_lab.setText(f"<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Signal: </span><span style=\" font-size:9pt; color:#d0d0d0;\">{params['signal']}</span></p><p><br/></p><p><br/></p></body></html>")
            self.trans_rate_lab.setText(f"<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Transmit rate: </span><span style=\" font-size:9pt; color:#d0d0d0;\">{params['transmit_rate']}</span></p><p><br/></p><p><br/></p></body></html>")
            self.rec_rate_lab.setText(f"<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Receive rate: </span><span style=\" font-size:9pt; color:#d0d0d0;\">{params['receive_rate']}</span></p><p><br/></p><p><br/></p></body></html>")
            self.channel_lab.setText(f"<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Channel: </span><span style=\" font-size:9pt; color:#d0d0d0;\">{params['channel']}</span></p><p><br/></p><p><br/></p></body></html>")
            self.auth_lab.setText(f"<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Auth: </span><span style=\" font-size:9pt; color:#d0d0d0;\">{params['auth']}</span></p><p><br/></p><p><br/></p></body></html>")
            self.cipher_lab.setText(f"<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Cipher: </span><span style=\" font-size:9pt; color:#d0d0d0;\">{params['cipher']}</span></p><p><br/></p><p><br/></p></body></html>")
            self.band_lab.setText(f"<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Band: </span><span style=\" font-size:9pt; color:#d0d0d0;\">{params['band']}</span></p><p><br/></p><p><br/></p></body></html>")

        elif self.start_detecting_btn.text() == "STOP detecting":
            with open("BOOL", "w") as f:
                f.write("False")
            self.start_detecting_btn.setText("START detecting")
            self.info_lab.setText("<html><head/><body><p><span style=\" font-weight:600; color:#cacaca;\">INFO about the connected network: </span><span style=\" color:#cacaca;\"></span></p><p><br/></p><p><br/></p></body></html>")
            self.bssid_lab.setText("<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">BSSID:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>")
            self.auth_lab.setText("<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Auth:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>")
            self.cipher_lab.setText("<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Cipher:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>")
            self.band_lab.setText("<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Band:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>")
            self.channel_lab.setText("<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Channel:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>")
            self.rec_rate_lab.setText("<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Receive rate:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>")
            self.signal_lab.setText("<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Signal:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>")
            self.trans_rate_lab.setText("<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\">Transmit rate:</span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p><p><span style=\" font-size:9pt; font-weight:600; color:#d0d0d0;\"><br/></span></p></body></html>")
        else:
            print("SOME ERROR")

class MyWin(QtWidgets.QWidget, Ui_MainWindow):
    def __init__(self):
        with open("BOOL", "w") as f:
            f.write("False")
        global proc
        proc = subprocess.Popen(["python", "parser.py"])
        super().__init__()
        self.setupUi(self)
        self.setWindowIcon(QtGui.QIcon('logo.png'))
        from PyQt5.QtWinExtras import QtWin  # !!!
        myappid = 'mycompany.myproduct.subproduct.version'  # !!!
        QtWin.setCurrentProcessExplicitAppUserModelID(myappid)


    def closeEvent(self, event):
        global proc
        proc.kill()
        event.accept()



def main():
    app = QtWidgets.QApplication(sys.argv)
    w = MyWin()
    w.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    import sys
    main()

